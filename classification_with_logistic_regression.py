# -*- coding: utf-8 -*-
"""Classification with Logistic Regression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wm6B0tHbERrI9RRj4FNR9N9tLC-LKfeb
"""

from google.colab import files
uploaded = files.upload()  # Upload your 'data.csv' file here

import pandas as pd

df = pd.read_csv('data.csv')
print("▶︎ Columns:", df.columns.tolist())
print(df.head())

from sklearn.preprocessing import LabelEncoder

# 1. Drop irrelevant cols
df = df.drop(['id', 'Unnamed: 32'], axis=1)

# 2. Encode target
le = LabelEncoder()
df['diagnosis'] = le.fit_transform(df['diagnosis'])
#   → malignant (M)=1, benign (B)=0

# 3. Split into X, y
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

print("▶︎ X shape:", X.shape, " y distribution:\n", y.value_counts())

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test  = scaler.transform(X_test)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train, y_train)

from sklearn.metrics import confusion_matrix, classification_report

y_pred = model.predict(X_test)
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt

y_prob = model.predict_proba(X_test)[:,1]
fpr, tpr, _ = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.plot(fpr, tpr, label=f"AUC = {roc_auc:.2f}")
plt.plot([0,1],[0,1],'--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

z = np.linspace(-10, 10, 200)
sigmoid = 1 / (1 + np.exp(-z))

plt.plot(z, sigmoid)
plt.title('Sigmoid Function')
plt.xlabel('z')
plt.ylabel('σ(z)')
plt.grid()
plt.show()